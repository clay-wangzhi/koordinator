//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright 2022 The Koordinator Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by conversion-gen. DO NOT EDIT.

package v1beta3

import (
	unsafe "unsafe"

	extension "github.com/clay-wangzhi/koordinator/apis/extension"
	config "github.com/clay-wangzhi/koordinator/pkg/scheduler/apis/config"
	v1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	conversion "k8s.io/apimachinery/pkg/conversion"
	runtime "k8s.io/apimachinery/pkg/runtime"
	configv1beta3 "k8s.io/kube-scheduler/config/v1beta3"
	apisconfig "k8s.io/kubernetes/pkg/scheduler/apis/config"
)

func init() {
	localSchemeBuilder.Register(RegisterConversions)
}

// RegisterConversions adds conversion functions to the given scheme.
// Public to allow building arbitrary schemes.
func RegisterConversions(s *runtime.Scheme) error {
	if err := s.AddGeneratedConversionFunc((*LoadAwareSchedulingAggregatedArgs)(nil), (*config.LoadAwareSchedulingAggregatedArgs)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1beta3_LoadAwareSchedulingAggregatedArgs_To_config_LoadAwareSchedulingAggregatedArgs(a.(*LoadAwareSchedulingAggregatedArgs), b.(*config.LoadAwareSchedulingAggregatedArgs), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*config.LoadAwareSchedulingAggregatedArgs)(nil), (*LoadAwareSchedulingAggregatedArgs)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_config_LoadAwareSchedulingAggregatedArgs_To_v1beta3_LoadAwareSchedulingAggregatedArgs(a.(*config.LoadAwareSchedulingAggregatedArgs), b.(*LoadAwareSchedulingAggregatedArgs), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*config.LoadAwareSchedulingArgs)(nil), (*LoadAwareSchedulingArgs)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_config_LoadAwareSchedulingArgs_To_v1beta3_LoadAwareSchedulingArgs(a.(*config.LoadAwareSchedulingArgs), b.(*LoadAwareSchedulingArgs), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*ScoringStrategy)(nil), (*config.ScoringStrategy)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1beta3_ScoringStrategy_To_config_ScoringStrategy(a.(*ScoringStrategy), b.(*config.ScoringStrategy), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*config.ScoringStrategy)(nil), (*ScoringStrategy)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_config_ScoringStrategy_To_v1beta3_ScoringStrategy(a.(*config.ScoringStrategy), b.(*ScoringStrategy), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*LoadAwareSchedulingArgs)(nil), (*config.LoadAwareSchedulingArgs)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1beta3_LoadAwareSchedulingArgs_To_config_LoadAwareSchedulingArgs(a.(*LoadAwareSchedulingArgs), b.(*config.LoadAwareSchedulingArgs), scope)
	}); err != nil {
		return err
	}
	return nil
}

func autoConvert_v1beta3_LoadAwareSchedulingAggregatedArgs_To_config_LoadAwareSchedulingAggregatedArgs(in *LoadAwareSchedulingAggregatedArgs, out *config.LoadAwareSchedulingAggregatedArgs, s conversion.Scope) error {
	out.UsageThresholds = *(*map[v1.ResourceName]int64)(unsafe.Pointer(&in.UsageThresholds))
	out.UsageAggregationType = extension.AggregationType(in.UsageAggregationType)
	if err := metav1.Convert_Pointer_v1_Duration_To_v1_Duration(&in.UsageAggregatedDuration, &out.UsageAggregatedDuration, s); err != nil {
		return err
	}
	out.ScoreAggregationType = extension.AggregationType(in.ScoreAggregationType)
	if err := metav1.Convert_Pointer_v1_Duration_To_v1_Duration(&in.ScoreAggregatedDuration, &out.ScoreAggregatedDuration, s); err != nil {
		return err
	}
	return nil
}

// Convert_v1beta3_LoadAwareSchedulingAggregatedArgs_To_config_LoadAwareSchedulingAggregatedArgs is an autogenerated conversion function.
func Convert_v1beta3_LoadAwareSchedulingAggregatedArgs_To_config_LoadAwareSchedulingAggregatedArgs(in *LoadAwareSchedulingAggregatedArgs, out *config.LoadAwareSchedulingAggregatedArgs, s conversion.Scope) error {
	return autoConvert_v1beta3_LoadAwareSchedulingAggregatedArgs_To_config_LoadAwareSchedulingAggregatedArgs(in, out, s)
}

func autoConvert_config_LoadAwareSchedulingAggregatedArgs_To_v1beta3_LoadAwareSchedulingAggregatedArgs(in *config.LoadAwareSchedulingAggregatedArgs, out *LoadAwareSchedulingAggregatedArgs, s conversion.Scope) error {
	out.UsageThresholds = *(*map[v1.ResourceName]int64)(unsafe.Pointer(&in.UsageThresholds))
	out.UsageAggregationType = extension.AggregationType(in.UsageAggregationType)
	if err := metav1.Convert_v1_Duration_To_Pointer_v1_Duration(&in.UsageAggregatedDuration, &out.UsageAggregatedDuration, s); err != nil {
		return err
	}
	out.ScoreAggregationType = extension.AggregationType(in.ScoreAggregationType)
	if err := metav1.Convert_v1_Duration_To_Pointer_v1_Duration(&in.ScoreAggregatedDuration, &out.ScoreAggregatedDuration, s); err != nil {
		return err
	}
	return nil
}

// Convert_config_LoadAwareSchedulingAggregatedArgs_To_v1beta3_LoadAwareSchedulingAggregatedArgs is an autogenerated conversion function.
func Convert_config_LoadAwareSchedulingAggregatedArgs_To_v1beta3_LoadAwareSchedulingAggregatedArgs(in *config.LoadAwareSchedulingAggregatedArgs, out *LoadAwareSchedulingAggregatedArgs, s conversion.Scope) error {
	return autoConvert_config_LoadAwareSchedulingAggregatedArgs_To_v1beta3_LoadAwareSchedulingAggregatedArgs(in, out, s)
}

func autoConvert_v1beta3_LoadAwareSchedulingArgs_To_config_LoadAwareSchedulingArgs(in *LoadAwareSchedulingArgs, out *config.LoadAwareSchedulingArgs, s conversion.Scope) error {
	out.FilterExpiredNodeMetrics = (*bool)(unsafe.Pointer(in.FilterExpiredNodeMetrics))
	out.NodeMetricExpirationSeconds = (*int64)(unsafe.Pointer(in.NodeMetricExpirationSeconds))
	out.EnableScheduleWhenNodeMetricsExpired = (*bool)(unsafe.Pointer(in.EnableScheduleWhenNodeMetricsExpired))
	out.ResourceWeights = *(*map[v1.ResourceName]int64)(unsafe.Pointer(&in.ResourceWeights))
	out.UsageThresholds = *(*map[v1.ResourceName]int64)(unsafe.Pointer(&in.UsageThresholds))
	out.ProdUsageThresholds = *(*map[v1.ResourceName]int64)(unsafe.Pointer(&in.ProdUsageThresholds))
	if err := metav1.Convert_Pointer_bool_To_bool(&in.ScoreAccordingProdUsage, &out.ScoreAccordingProdUsage, s); err != nil {
		return err
	}
	out.Estimator = in.Estimator
	out.EstimatedScalingFactors = *(*map[v1.ResourceName]int64)(unsafe.Pointer(&in.EstimatedScalingFactors))
	if in.Aggregated != nil {
		in, out := &in.Aggregated, &out.Aggregated
		*out = new(config.LoadAwareSchedulingAggregatedArgs)
		if err := Convert_v1beta3_LoadAwareSchedulingAggregatedArgs_To_config_LoadAwareSchedulingAggregatedArgs(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.Aggregated = nil
	}
	return nil
}

func autoConvert_config_LoadAwareSchedulingArgs_To_v1beta3_LoadAwareSchedulingArgs(in *config.LoadAwareSchedulingArgs, out *LoadAwareSchedulingArgs, s conversion.Scope) error {
	out.FilterExpiredNodeMetrics = (*bool)(unsafe.Pointer(in.FilterExpiredNodeMetrics))
	out.NodeMetricExpirationSeconds = (*int64)(unsafe.Pointer(in.NodeMetricExpirationSeconds))
	out.EnableScheduleWhenNodeMetricsExpired = (*bool)(unsafe.Pointer(in.EnableScheduleWhenNodeMetricsExpired))
	out.ResourceWeights = *(*map[v1.ResourceName]int64)(unsafe.Pointer(&in.ResourceWeights))
	out.UsageThresholds = *(*map[v1.ResourceName]int64)(unsafe.Pointer(&in.UsageThresholds))
	out.ProdUsageThresholds = *(*map[v1.ResourceName]int64)(unsafe.Pointer(&in.ProdUsageThresholds))
	if err := metav1.Convert_bool_To_Pointer_bool(&in.ScoreAccordingProdUsage, &out.ScoreAccordingProdUsage, s); err != nil {
		return err
	}
	out.Estimator = in.Estimator
	out.EstimatedScalingFactors = *(*map[v1.ResourceName]int64)(unsafe.Pointer(&in.EstimatedScalingFactors))
	if in.Aggregated != nil {
		in, out := &in.Aggregated, &out.Aggregated
		*out = new(LoadAwareSchedulingAggregatedArgs)
		if err := Convert_config_LoadAwareSchedulingAggregatedArgs_To_v1beta3_LoadAwareSchedulingAggregatedArgs(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.Aggregated = nil
	}
	return nil
}

// Convert_config_LoadAwareSchedulingArgs_To_v1beta3_LoadAwareSchedulingArgs is an autogenerated conversion function.
func Convert_config_LoadAwareSchedulingArgs_To_v1beta3_LoadAwareSchedulingArgs(in *config.LoadAwareSchedulingArgs, out *LoadAwareSchedulingArgs, s conversion.Scope) error {
	return autoConvert_config_LoadAwareSchedulingArgs_To_v1beta3_LoadAwareSchedulingArgs(in, out, s)
}

func autoConvert_v1beta3_ScoringStrategy_To_config_ScoringStrategy(in *ScoringStrategy, out *config.ScoringStrategy, s conversion.Scope) error {
	out.Type = config.ScoringStrategyType(in.Type)
	out.Resources = *(*[]apisconfig.ResourceSpec)(unsafe.Pointer(&in.Resources))
	return nil
}

// Convert_v1beta3_ScoringStrategy_To_config_ScoringStrategy is an autogenerated conversion function.
func Convert_v1beta3_ScoringStrategy_To_config_ScoringStrategy(in *ScoringStrategy, out *config.ScoringStrategy, s conversion.Scope) error {
	return autoConvert_v1beta3_ScoringStrategy_To_config_ScoringStrategy(in, out, s)
}

func autoConvert_config_ScoringStrategy_To_v1beta3_ScoringStrategy(in *config.ScoringStrategy, out *ScoringStrategy, s conversion.Scope) error {
	out.Type = ScoringStrategyType(in.Type)
	out.Resources = *(*[]configv1beta3.ResourceSpec)(unsafe.Pointer(&in.Resources))
	return nil
}

// Convert_config_ScoringStrategy_To_v1beta3_ScoringStrategy is an autogenerated conversion function.
func Convert_config_ScoringStrategy_To_v1beta3_ScoringStrategy(in *config.ScoringStrategy, out *ScoringStrategy, s conversion.Scope) error {
	return autoConvert_config_ScoringStrategy_To_v1beta3_ScoringStrategy(in, out, s)
}
